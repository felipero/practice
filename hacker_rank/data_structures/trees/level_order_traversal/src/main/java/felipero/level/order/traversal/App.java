/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package felipero.level.order.traversal;

import java.util.*;
// import java.io.*;
import java.util.stream.Collectors;

class Node {
    Node left;
    Node right;
    int data;

    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }

    public String toString() {
        return String.valueOf(this.data);
    }
}

class App {

    public static List<Node> levelOrder(Node root) {
        List<Node> traversal = new ArrayList<Node>();

        List<Node> queue = new LinkedList<Node>();
        queue.add(root);

        while (!queue.isEmpty()) {
            Node nodeToProcess = queue.remove(0);

            if (nodeToProcess.left != null)
                queue.add(nodeToProcess.left);

            if (nodeToProcess.right != null)
                queue.add(nodeToProcess.right);

            traversal.add(nodeToProcess);
        }

        // if (root.left != null) {

        // leftNodes = levelOrder(root.left);
        // leftNodes.remove(0);
        // }

        // if (root.right != null) {
        // traversal.add(root.right);
        // rightNodes = levelOrder(root.right);
        // rightNodes.remove(0);
        // }

        // if (leftNodes != null)
        // traversal.addAll(leftNodes);

        // if (rightNodes != null)
        // traversal.addAll(rightNodes);

        return traversal;
    }

    public static String printLevelOrder(Node root) {
        List<Node> nodes = levelOrder(root);
        return nodes.stream().map(Object::toString).collect(Collectors.joining(" "));
    }

    public static Node insert(Node root, int data) {
        if (root == null) {
            return new Node(data);
        } else {
            Node cur;
            if (data <= root.data) {
                cur = insert(root.left, data);
                root.left = cur;
            } else {
                cur = insert(root.right, data);
                root.right = cur;
            }
            return root;
        }
    }

    public static String execute(String input) {
        Scanner scan = new Scanner(input);
        int t = scan.nextInt();
        Node root = null;
        while (t-- > 0) {
            int data = scan.nextInt();
            root = insert(root, data);
        }
        scan.close();
        return printLevelOrder(root);
    }

    public static void main(String[] args) {
        String input = "6 \n 1 2 5 3 6 4";
        System.out.println(execute(input));
    }
}